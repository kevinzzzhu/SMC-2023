// Adaptive Music: Similar to Tetris: Effect, you can dynamically change the music based on gameplay events.
// For example, as the game progresses and the player achieves higher scores or reaches certain milestones, *****
// you can modify the tempo, add new layers of instrumentation, or introduce more complex musical patterns. *****
// This adaptive approach can enhance the overall experience and create a sense of progression.

// Generative Music: Utilize the capabilities of Gibber and Puredata to generate music algorithmically. *****
// Experiment with different algorithms to create evolving melodies, harmonies, and rhythms.
// You can also link the music generation to game events, such as clearing lines or achieving combos, *****
// to generate unique musical sequences in real-time.

// Visualization: Create visual elements that synchronize with the music.
// For example, you can generate graphics or animations that react to different sound parameters, such as frequency or volume. *****
// These visualizations can enhance the overall experience and create a more immersive performance.

use( 'hydra' ).then( init => init() )
use ( 'p5' )
// Sound setup
kickMove = Kick('tight');
hatTransform = Hat();
claveNew = Clave();
clapEliminated = Clap();
var input = "Hello World";
let command = false;
var continued = false;
var giveup = false;
var combo = false;
var fade = 0;
var fadeAmount = 10;
var num = 0;
var eliminate = 0;
var count = 0;
var changeColor = false;
// Introduce a Websocket to control
const socket = new WebSocket("ws://localhost:13001")
socket.addEventListener("open", (event) => {
  console.log("connected to websocket")
})
socket.addEventListener("message", (event) => {
  input = event.data.length;
  if (input != 5){
    command = true;
    if (input > 5 & input <= 15){
      hatTransform.trigger();
    }
    else{
      kickMove.trigger();
    }
  }
})
let keyPressUp = false;
let keyPressDown = false;
let keyPressLeft = false;
let keyPressRight = false;
var shapeList = [
  [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0], // I
  [0, 2, 0, 0, 2, 0, 0, 2, 2], // L
  [0, 3, 0, 0, 3, 0, 3, 3, 0], // J
  [4, 4, 0, 0, 4, 4, 0, 0, 0], // Z
  [0, 5, 5, 5, 5, 0, 0, 0, 0], // S
  [0, 0, 0, 6, 6, 6, 0, 6, 0], // T
  [7, 7, 7, 7], // O
];
var palletteMono = [];
var pallette = [
  [255, 255, 255], // 0, void
  [255, 224, 0], // 1 Yellow
  [255, 32, 0], // 2 Red
  [32, 255, 0], // 3 Green
  [16, 128, 255], // 4 Blue
  [255, 96, 16], // 5 Orange
  [0, 196, 255], // 6 Light Blue
  [128, 0, 255], // 7 Purple
];
var emoji = [
  "^_^",
  "owo",
  "UwU",
  "OvO",
  ">w<",
  ":3:",
  "T^T",
  "QwQ",
  ">.<",
  "^w^",
  ">3<"
]
setup = function() {
  createCanvas(windowWidth, windowHeight);
  this.tetris = new Tetris(10, 20);
  this.timer = new Timer();
  frameRate(60);
  palletteMono = [];
  for (let i = 0; i < pallette.length; i++) {
    let rgb = pallette[i];
    let gray = rgb[0] + rgb[1] + rgb[2];
    palletteMono[i] = [];
    palletteMono[i][0] = 255 * gray;
    palletteMono[i][1] = 255 * gray;
    palletteMono[i][2] = 255 * gray;
  }
}
Tetris = class {
  constructor(nx, ny) {
    this.tGrid = new TGrid(nx, ny);
    this.timer = new Timer();
    this.restartGame();
    this.shapeNext = undefined;
    this.pickNextShape();
  }
  restartGame() {
    this.tGrid.clearGrid();
    this.restart = false;
    this.pause = false;
    this.gameOver = false;
    this.spawn = true;
    this.rotate = false;
    this.tx = this.ty = 0;
    this.level = 1;
    this.rowsPerLevel = 3;
    this.rowsCompleted = 0;
    this.shapesCount = 0;
    this.timer.reset(600);
  }
  pickNextShape() {
    this.shapeCurr = this.shapeNext;
    var indexNext = parseInt(random(shapeList.length));
    this.shapeNext = shapeList[indexNext].slice();
  }
  update() {
    if (this.restart) {
      this.restartGame();
    }
    if (this.pause) {
      return;
    }
    // Spawn new shape
    if (this.spawn) {
      this.pickNextShape();
      this.tGrid.setShape(this.shapeCurr);
      this.shapesCount++;
      this.spawn = false;
    }
    // Update level/rows/difficulty
    this.level += floor(this.rowsCompleted / this.rowsPerLevel);
    this.rowsCompleted %= this.rowsPerLevel;
    this.timer.duration = ceil(800 / sqrt(this.level));
    // Game over check
    this.gameOver = this.tGrid.collision(0, 0);
    if (this.gameOver) {
      return;
    }
    // Apply user input: transforms
    if (this.rotate) this.tGrid.rotateShape();
    if (!this.tGrid.collision(this.tx, 0)) this.tGrid.sx += this.tx;
    if (!this.tGrid.collision(0, this.ty)) this.tGrid.sy += this.ty;
    // Apply game step
    if (this.timer.updateStep()) {
      if (!this.tGrid.collision(0, 1)) {
        if (this.ty == 0) {
          this.tGrid.sy++;
        }
      } else {
        claveNew.trigger();
        this.tGrid.splatShape();
        eliminate = 0;
        eliminate += this.tGrid.updateRows();
        this.rowsCompleted += eliminate;
        this.spawn = true;
        if (eliminate > 0){
          combo = true;
          changeColor = true
        }
      }
    }
    // Reset transforms
    this.rotate = false;
    this.tx = this.ty = 0;
  }
  display(canvas) {
    // TODO: Add more visualizations/particle effects
    // TODO: Change the entire theme of the game (Filter)
    // TODO: Find ways to control the visualization in performance (Only possible controlling the background)
    var off, x, y, w, h, cell;
    var canvasW = canvas.width;
    var canvasH = canvas.height;
    off = 40;
    h = canvasH - 2 * off;
    w = canvasW - 2 * off;
    cell = ceil(Math.min(w / this.tGrid.nx, h / this.tGrid.ny));
    w = this.tGrid.nx * cell;
    h = this.tGrid.ny * cell;
    x = parseInt((canvasW - w) / 2.0);
    y = parseInt((canvasH - h) / 2.0);
    // TODO
    if (changeColor){
      for (var j = 0; j < pallette.length; j++){
        for (var i = 0; i < 3; i++){
          if (pallette[j][i] > 10){
            pallette[j][i] = pallette[j][i]-5;
          }
        }
      }
      changeColor = false;
    }
    // Game screen
    var colors = this.pause || this.gameOver ? palletteMono : pallette;
    this.displayGrid(canvas, x, y, w, h, colors);
    // Shape preview
    {
      var _w = (x - off)/2;
      var _h = (canvasH - off)/2;
      var _y = off*8;
      var _x = off*7 + x + w;
      this.displayNextShape(canvas, _x, _y, _w, _h);
    }
    // Came level, ...
    {
      var ty = canvasH / 2 - 400;
      var tx1 = x + w + x / 2;
      var txtLevel = "LEVEL " + this.level;
      var txtProgress = "ROW " + this.rowsCompleted + "/" + this.rowsPerLevel;
      var txtShapes = "SHAPE " + this.shapesCount;
      canvas.fill(0)
      canvas.rect(tx1-60, ty-25, 120, 80)
      canvas.textAlign(CENTER, CENTER);
      canvas.noStroke();
      canvas.fill(200);
      canvas.textSize(24);
      canvas.text(txtLevel, tx1, ty);
      canvas.fill(96);
      canvas.textSize(16);
      canvas.text(txtProgress, tx1, (ty += 24));
      canvas.text(txtShapes, tx1, (ty += 16));
    }
    // Combo
    if (combo){
      // TOD: Interesting sound if eliminated more!
      count = 0;
      count += eliminate;
      fill(255, 224, 0, fade);
      textSize(50);
      text(emoji[num] + "   x" + str(count) + "!   " + emoji[num], canvasW / 2 + 2, canvasH / 2 + 1);
      if (fade < 0) fadeAmount = 10;
      if (fade > 255) fadeAmount = -5;   
      fade += fadeAmount; 
      if (count == 1){
      }
      else if (count == 2){
      }
      else if (count == 3){
      }
      else if (count == 4){
      }
    }
    if (fade < 0) {
      num = int(random(0, 10));
      combo = false;
    }
    // Game status
    var txtGameStatus = undefined;
    if (this.gameOver) txtGameStatus = "GAME OVER";
    if (this.pause) txtGameStatus = "PAUSE";
    if (txtGameStatus !== undefined) {
      canvas.textSize(100);
      canvas.textAlign(CENTER, CENTER);
      canvas.noStroke();
      canvas.fill(0, 0, 0);
      canvas.text(txtGameStatus, canvasW / 2 + 2, canvasH / 2 + 1);
      canvas.fill(255, 224, 0);
      canvas.text(txtGameStatus, canvasW / 2, canvasH / 2);
      if (this.gameOver){
        canvas.textSize(50);
        if (keyPressLeft || giveup){
          // TOD: Play sound
          giveup = true;
          continued = false;
          canvas.fill(255, 224, 0);
        }
        else canvas.fill(0);
        canvas.text("Give up?", canvasW/2 - 200, canvasH/2 + 300);
        if (keyPressRight || continued){
          // TOD: Play sound
          continued = true;
          giveup = false;
          canvas.fill(255, 224, 0);
        }
        else canvas.fill(0);
        canvas.text("Continue?", canvasW/2 + 200, canvasH/2 + 300);
        if (continued && keyPressUp){
          // Game restart at current level
          this.tGrid.clearGrid();
          this.restart = false;
          this.pause = false;
          this.gameOver = false;
          this.spawn = true;
          this.rotate = false;
        }
      }
    }
    // Controlls
    {
      var ty = canvasH - 6 * 15 - off;
      var tx1 = x + w + 40;
      var tx2 = tx1 + 70;
      canvas.textAlign(LEFT);
      canvas.noStroke();
      canvas.textSize(14);
      canvas.fill(96);
      canvas.text("A + B", tx1, ty);
      canvas.text("- ROTATE", tx2, ty);
      ty += 15;
      canvas.text("A", tx1, ty);
      canvas.text("- MOVE LEFT", tx2, ty);
      ty += 15;
      canvas.text("B", tx1, ty);
      canvas.text("- MOVE RIGHT", tx2, ty);
      ty += 15;
      canvas.text("SHAKE", tx1, ty);
      canvas.text("- MOVE DOWN", tx2, ty);
      ty += 25;
    }
  }
  displayGrid(pg, x, y, w, h, pallette) {
    var nx = this.tGrid.nx;
    var ny = this.tGrid.ny;
    var cw = w / nx;
    var ch = h / ny;
    // BG
    for (var gy = 0; gy < ny; gy++) {
      for (var gx = 0; gx < nx; gx++) {
        var cx = x + gx * cw;
        var cy = y + gy * ch;
        pg.stroke(44);
        if ((gx & 1) == 1) {
          pg.fill(66);
        } else {
          pg.fill(77);
        }
        pg.rect(cx, cy, cw, ch);
      }
    }
    // FG
    for (var gy = 0; gy < ny; gy++) {
      for (var gx = 0; gx < nx; gx++) {
        var cx = x + gx * cw;
        var cy = y + gy * ch;
        var valGrid = this.tGrid.getGridVal(gx, gy);
        if (valGrid > 0) {
          pg.stroke(0);
          var rgb = pallette[valGrid % pallette.length];
          pg.fill(rgb[0], rgb[1], rgb[2]);
          pg.rect(cx, cy, cw, ch);
        }
      }
    }
    // Shape
    var ks = this.tGrid.shapeSize;
    var kr = ceil(this.tGrid.shapeSize / 2.0);
    for (var ky = 0; ky < ks; ky++) {
      for (var kx = 0; kx < ks; kx++) {
        var gx = this.tGrid.sx + kx - kr;
        var gy = this.tGrid.sy + ky - kr;
        var cx = x + gx * cw;
        var cy = y + gy * ch;
        var valShape = this.tGrid.getShapeVal(kx, ky);
        if (valShape != 0) {
          pg.stroke(0);
          var rgb = pallette[valShape % pallette.length];
          pg.fill(rgb[0], rgb[1], rgb[2]);
          pg.rect(cx, cy, cw, ch);
        }
      }
    }
  }
  displayNextShape(pg, x, y, w, h) {
    var shape = this.shapeNext;
    var shapeSize = parseInt(sqrt(shape.length));
    var ks = shapeSize;
    var kr = shapeSize / 2.0;
    var cw = min(w / 5.0, h / 5.0);
    var ch = cw;
    // Background
    for (var ky = 0; ky < 4; ky++) {
      for (var kx = 0; kx < 4; kx++) {
        var gx = kx - 2;
        var gy = ky - 2;
        var cx = x + gx * cw + w / 2.0;
        var cy = y + gy * ch + h / 2.0;
        cx = parseInt(cx);
        cy = parseInt(cy);
        var valShape = shape[ky * shapeSize + kx];
        pg.fill(32);
        pg.stroke(32);
        pg.rect(cx, cy, cw, ch);
      }
    }
    for (var ky = 0; ky < ks; ky++) {
      for (var kx = 0; kx < ks; kx++) {
        var gx = kx - kr;
        var gy = ky - kr;
        var cx = x + gx * cw + w / 2.0;
        var cy = y + gy * ch + h / 2.0;
        cx = parseInt(cx);
        cy = parseInt(cy);
        var valShape = shape[ky * shapeSize + kx];
        if (valShape != 0) {
          pg.fill(200);
        } else {
          pg.fill(32);
        }
        pg.stroke(64);
        pg.rect(cx, cy, cw, ch);
      }
    }
  }
}
Timer = class{
  constructor() {
    this.duration = 600;
    this.time = 0;
  }
  reset(duration) {
    this.setTime();
    this.duration = duration;
  }
  setTime() {
    this.time = millis();
  }
  getTime() {
    return millis() - this.time;
  }
  updateStep() {
    if (this.getTime() >= this.duration) {
      this.setTime();
      return true;
    }
    return false;
  }
}
TGrid = class{
  constructor(nx, ny) {
    this.nx = nx;
    this.ny = ny;
    this.grid = [];
    this.grid.length = nx * ny;
    this.clearGrid();
    this.setShape([0]);
  }
  clearGrid() {
    for (var i = 0; i < this.grid.length; i++) {
      this.grid[i] = 0;
    }
  }
  isInsideGrid(x, y) {
    return x >= 0 && x < this.nx && y >= 0 && y < this.ny;
  }
  setShape(shape) {
    this.shape = shape;
    this.shapeSize = parseInt(sqrt(shape.length));
    this.sx = ceil(this.nx / 2);
    this.sy = ceil(this.shapeSize / 2);
  }
  getGridVal(x, y) {
    if (!this.isInsideGrid(x, y)) {
      return -1;
    } else {
      return this.grid[y * this.nx + x];
    }
  }
  setGridVal(x, y, val) {
    this.grid[y * this.nx + x] = val;
  }
  getShapeVal(x, y) {
    return this.shape[y * this.shapeSize + x];
  }
  rotateShapeDir(CW) {
    var size = this.shapeSize;
    var cpy = this.shape.slice(0);
    if (CW) {
      var ib = 0,
        ia = size * size;
      for (var y = 1; y <= size; y++, ia++) {
        for (var x = 1; x <= size; x++, ib++) {
          this.shape[ib] = cpy[ia - x * size];
        }
      }
    } else {
      var ib = 0,
        ia = -1;
      for (var y = 1; y <= size; y++, ia--) {
        for (var x = 1; x <= size; x++, ib++) {
          this.shape[ib] = cpy[ia + x * size];
        }
      }
    }
  }
  rotateShape() {
    this.rotateShapeDir(true);
    if (this.collision(0, 0)) {
      this.rotateShapeDir(false);
    }
  }
  collision(tx, ty) {
    var ks = this.shapeSize;
    var kr = ceil(this.shapeSize / 2);
    for (var ky = 0; ky < ks; ky++) {
      for (var kx = 0; kx < ks; kx++) {
        var px = this.sx + kx - kr + tx;
        var py = this.sy + ky - kr + ty;
        var valGrid = this.getGridVal(px, py);
        var valShape = this.getShapeVal(kx, ky);
        if (valGrid * valShape != 0) {
          return true;
        }
      }
    }
    return false;
  }
  updateRows() {
    var rows = 0;
    for (var gy = 0; gy < this.ny; gy++) {
      var rowCompleted = true;
      for (var gx = 0; gx < this.nx; gx++) {
        var gi = gy * this.nx + gx;
        if (this.grid[gi] == 0) rowCompleted = false;
      }
      if (rowCompleted) {
        this.grid.copyWithin(this.nx, 0, gy * this.nx);
        rows++;
      }
    }
    if (rows > 0) {
      for (var gx = 0; gx < this.nx; gx++) {
        this.grid[gx] = 0;
      }
      clapEliminated.trigger();
    }
    return rows;
  }
  splatShape() {
    let ks = this.shapeSize;
    let kr = ceil(this.shapeSize / 2);
    for (let ky = 0; ky < ks; ky++) {
      for (let kx = 0; kx < ks; kx++) {
        let px = this.sx + kx - kr;
        let py = this.sy + ky - kr;
        let valShape = this.getShapeVal(kx, ky);
        if (valShape != 0) {
          this.setGridVal(px, py, valShape );
        }
      }
    }
  }
}
function applyInput(newDelay) {
  if (command == true){
    if (keyPressUp) this.tetris.rotate = true;
  	if (keyPressDown) this.tetris.ty = +2;
  	if (keyPressLeft) this.tetris.tx = -1;
  	if (keyPressRight) this.tetris.tx = +1;
    command = false;
  }
  keyPressUp = false;
  keyPressDown = false;
 	keyPressLeft = false;
 	keyPressRight = false;
  this.timer.reset(newDelay);
}
draw = function() {
  // Endgame
  if (giveup && keyPressUp){
    fill(0);
    rect(0, 0, 10000);
  }
  else{
    if (input > 5 & input <= 15) keyPressUp = true;
    if (input > 15 & input <= 25) keyPressDown = true;
    if (input > 25 & input <= 35) keyPressLeft = true;
    if (input > 35 & input <= 45) keyPressRight = true;
    if (input == 5) {
      keyPressUp = false;
      keyPressDown = false;
      keyPressLeft = false;
      keyPressRight = false;
    }
    if (this.timer.updateStep()) {
      applyInput(25);
    }
    this.tetris.update();
    this.tetris.display(this);
  }
}


// Configure
hatTransform.trigger();
kickMove.trigger();
claveNew.trigger();
clapEliminated.trigger();
this.tetris.pause = true;
this.tetris.pause = false;
this.tetris.restart = true;

solid().out(o0)

// Colorful mouse
osc(8,-0.5, 1).color(-1.5, -1.5, -1.5).blend(o0)
  .rotate(-0.5, -0.5)
  .modulate(shape(4)
            .rotate(3, 0.5)
            .scale(2)
            .repeatX(2, 2)
            .modulate(o0, () => mouse.x * 0.0005)
            .repeatY(2, 2)).out(o0)

solid().out(o0)

// Dark chaos
voronoi(350,0.15)
  	.modulateScale(osc(50).rotate(Math.sin(time)),.5)
  	.thresh(.8)
.scale(()=>a.fft[3]-8).color(1,1,1)
	.modulateRotate(osc(),.4)
  	.diff(src(o0).scale(1.8))
	.modulateScale(osc(2).modulateRotate(o0,.74))
	.diff(src(o0).rotate([-.012,.01,-.002,0]).scrollY(0,[-1/199800,0].fast(0.7)))
	.out()

solid().out(o0)

// Colorful strange
osc(23,.3,.8).color(2,1,6)
  .mult(voronoi(350,0.15)
        .modulateScale(osc(50)
                       .rotate(Math.sin(time)),.5)
        .thresh(.1,.2)
        .rotate(1,-0.2))
  .modulateRotate(osc(42,.1)
                  .pixelate(150,150)
                  .blend(o0,.8), .22)
  .out(o0)

solid().out(o0)

// Slow Colorful
osc(20, 0.03, 1.7)
  .kaleid()
  .mult(osc(20, 0.001, 0)
                                 .rotate(1.58))
  .blend(o0, 0.94)
  .modulateScale(osc(10, 0),-0.03)
  .scale(0.8, () => (1.05 + 0.1 * Math.sin(0.05*time)))
  .out(o0)

solid().out(o0)

// Green and red Tornado
src(o0)
	.posterize(2, 2)
	.shift(1 / 8, 1 / 4, 1 / 2)
	.colorama(3)
	.contrast(3)
	.saturate(1.01)
	.brightness(.01)
	.modulateHue(src(o0)
		.scale(1.01), 2)
	.layer(osc(1)
		.scale("st.y-st.x", "st.x-st.y", .01)
		.scale(10, .01)
		.rotate(.1, .1)
		.mask(osc(1)
			.scale("st.y-st.x", "st.x-st.y", .01)
			.scale(10, .01)
			.rotate(-.1, -.1)))
	.invert("asin(st.x)*acos(st.y)")
	.out();

solid().out(o0)

// Strange dark universe
const pi = () => Math.random(Math.PI) * 25;
s0.initVideo("https://media1.giphy.com/media/fvCoIEB8YtKghURZcA/giphy.mp4"); 
// https://media1.giphy.com/media/fvCoIEB8YtKghURZcA/giphy.mp4 
// https://media3.giphy.com/media/DkleR7V8RMtrim0cH5/giphy.mp4
src(s0)
  .modulatePixelate(
    osc(100,-0.01245,1)
      .pixelate(pi, pi)
      .scrollX(() => Math.random(10)))
  .blend(s0)
  .out(o0);

solid().out(o0)

// Strange dark blue red flames
n = 8
a = () => shape(4,0.25,0.009).rotate(()=>time/-40).repeat(n,n)
a().add(a().scrollX(0.5/n).scrollY(0.5/n),1).modulate(o1,0.1)
  .modulate(src(o1).color(10,10).add(solid(-14,-14)).rotate(()=>time/40),0.005)
  .add(src(o1).scrollY(0.012,0.02),0.5).out(o1)
src(o1).colorama(1.2).posterize(4).saturate(0.7).contrast(6).mult(solid(),0.15).out(o0)

solid().out(o0)

// Super fast colorful triangles
osc(100,-0.01245,1).pixelate(50).kaleid(()=>(Math.sin(time/8)*9+3)).rotate(0,0.125)
.modulateRotate(shape(3).scale(()=>(Math.cos(time)*2))
                .rotate(0,-0.25))
  .diff(src(o0).brightness(0.3))
  .out()

solid().out(o0)

// Super light slow boxes
osc(20, 0.1, 0).color(0, 1, 2).rotate(1.57/2).out(o1)
osc(30, 0.01, 0).color(2, 0.7, 1).modulate(o1, 0).add(o1,1)
  .modulatePixelate(o1,1,10).out(o0)

solid().out(o0)

// Dark lights glowing fast
shape([4,5,6].fast(0.1).smooth(1),0.000001,[0.2,0.7].smooth(1))
.color(0.2,0.4,0.3)
.scrollX(()=>Math.sin(time*0.27))
.add(
  shape([4,5,6].fast(0.1).smooth(1),0.000001,[0.2,0.7,0.5,0.3].smooth(1))
  .color(0.6,0.2,0.5)
  .scrollY(0.35)
  .scrollX(()=>Math.sin(time*0.33)))
.add(
  shape([4,5,6].fast(0.1).smooth(1),0.000001,[0.2,0.7,0.3].smooth(1))
  .color(0.2,0.4,0.6)
  .scrollY(-0.35)
  .scrollX(()=>Math.sin(time*0.41)*-1))
.add(
      src(o0).shift(0.001,0.01,0.001)
      .scrollX([0.05,-0.05].fast(0.1).smooth(1))
      .scale([1.05,0.9].fast(0.3).smooth(1),[1.05,0.9,1].fast(0.29).smooth(1))
      ,0.85)
.modulate(voronoi(10,2,2))
.out()

solid().out(o0)

// Slow white dark snow
voronoi(50,1)
  .luma(0.5).add(shape(1,1).luma(1))
  .modulate(osc(-1000,-1)
            .modulate(osc().luma()))
  .blend(o0)
  .blend(o0)
  .blend(o0)
  .blend(o0)
  .out()